source('~/Dropbox/Work/Current Projects/Software/BayesFoSR/R/VB_CS_FPCA.R')
library(BayesFoSR)
?bayes_fosr
library(PlotInteractive)
?plot_interactive
?vb_cs_fpca
library(refund)
data(DTI)
DTI = subset(DTI, select = c(cca, case, pasat))
DTI = DTI[complete.cases(DTI),]
DTI$gender = factor(sample(c("male","female"), dim(DTI)[1], replace = TRUE))
DTI$status = factor(sample(c("RRMS", "SPMS", "PPMS"), dim(DTI)[1], replace = TRUE))
fosr.dti1 = vb_cs_fpca(cca ~ 1, data = DTI, Kp = 1)
fosr.dti1 = vb_cs_fpca(cca ~ 1, data = DTI, Kp = 2)
fosr.dti1 = vb_cs_fpca(cca ~ 1, data = DTI, Kp = 2)
bayes_fosr(cca ~ 1, data = DTI, Kp = 2, est.method = "VB", cov.method = "FPCA")
cca ~ 1
formula =
cca ~ 1
data = DTI
Kp = 2
Kt=5
alpha = .1
Aw = NULL
Bw = NULL
Apsi = NULL
Bpsi = NULL
# not used now but may need this later
call <- match.call()
tf <- terms.formula(formula, specials = "re")
trmstrings <- attr(tf, "term.labels")
specials <- attr(tf, "specials")    # if there are no random effects this will be NULL
where.re <-specials$re - 1
# gets matrix of fixed and random effects
if(length(where.re)!=0){
mf_fixed <- model.frame(tf[-where.re], data = data)
formula = tf[-where.re]
# get random effects matrix
responsename <- attr(tf, "variables")[2][[1]]
REs = eval(parse(text=attr(tf[where.re], "term.labels")))
# set up dataframe if data = NULL
formula2 <- paste(responsename, "~", REs[[1]],sep = "")
newfrml <- paste(responsename, "~", REs[[2]],sep = "")
newtrmstrings <- attr(tf[-where.re], "term.labels")
formula2 <- formula(paste(c(formula2, newtrmstrings), collapse = "+"))
newfrml <- formula(paste(c(newfrml, newtrmstrings), collapse = "+"))
mf <- model.frame(formula2, data = data)
# creates the Z matrix. get rid of $zt if you want a list with more stuff.
if(length(data)==0){Z = lme4::mkReTrms(lme4::findbars(newfrml),fr=mf)$Zt
}else
{Z = lme4::mkReTrms(lme4::findbars(newfrml),fr=data)$Zt}
} else {
mf_fixed <- model.frame(tf, data = data)
}
mt_fixed <- attr(mf_fixed, "terms")
# get response (Y)
Y <- model.response(mf_fixed, "numeric")
# x is a matrix of fixed effects
# automatically adds in intercept
W.des = X <- model.matrix(mt_fixed, mf_fixed, contrasts)
Y
X
## subject covariates
I = dim(X)[1]
D = dim(Y)[2]
p = dim(X)[2]
## bspline basis and penalty matrix
Theta = bs(1:D, df=Kt, intercept=TRUE, degree=3)
diff0 = diag(1, D, D)
diff2 = matrix(rep(c(1,-2,1, rep(0, D-2)), D-2)[1:((D-2)*D)], D-2, D, byrow = TRUE)
P0 = t(Theta) %*% t(diff0) %*% diff0 %*% Theta
P2 = t(Theta) %*% t(diff2) %*% diff2 %*% Theta
P.mat = alpha * P0 + (1-alpha) * P2
## data organization; these computations only need to be done once
Y.vec = as.vector(t(Y))
obspts.vec = !is.na(Y.vec)
Y.vec = Y.vec[obspts.vec]
J = sum(obspts.vec)
t.designmat.X = t(kronecker(X, Theta)[obspts.vec,])
XtX = matrix(0, Kt*p, Kt*p)
sumXtX = matrix(0, Kt*p, Kt*p)
for(i in 1:I){
obs.points = which(!is.na(Y[i, ]))
X.cur = kronecker(matrix(X[i,], nrow = 1, ncol = p), Theta)[obs.points,]
XtX = XtX + crossprod(X.cur)
sumXtX = sumXtX + t(X.cur)%*% X.cur
}
## initial estimation and hyperparameter choice
vec.BW = solve(kronecker(t(W.des)%*% W.des, t(Theta) %*% Theta)) %*% t(kronecker(W.des, Theta)) %*% Y.vec
mu.q.BW = matrix(vec.BW, Kt, p)
Yhat = as.matrix(W.des %*% t(mu.q.BW) %*% t(Theta))
Aw = ifelse(is.null(Aw), Kt/2, Aw)
if(is.null(Bw)){
Bw = b.q.lambda.BW = sapply(1:p, function(u) max(1, .5*sum(diag( t(mu.q.BW[,u]) %*% P.mat %*% (mu.q.BW[,u])))))
} else {
Bw = b.q.lambda.BW = rep(Bw, p)
}
mu.q.BW
Apsi = ifelse(is.null(Apsi), Kt/2, Apsi)
Bpsi = ifelse(is.null(Bpsi), Kt/2, Bpsi)
Asig = 1; Bsig = 1
## matrices to to approximate paramater values
sigma.q.Bpsi = vector("list", Kp)
for(k in 1:Kp){
sigma.q.Bpsi[[k]] = diag(1, Kt)
}
mu.q.Bpsi = matrix(0, nrow = Kt, ncol = Kp)
sigma.q.C = vector("list", I)
for(k in 1:I){
sigma.q.C[[k]] = diag(1, Kp)
}
mu.q.C = matrix(rnorm(I*Kp, 0, .01), I, Kp)
b.q.lambda.Bpsi = rep(Bpsi, Kp)
b.q.sigma.me = Bsig
## initialize estimates of fixed, random and pca effects
pcaef.cur = matrix(0, I, D)
lpxq=c(0,1)
j=2
if(verbose) { cat("Beginning Algorithm \n") }
###############################################################
## update regression coefficients
###############################################################
mean.cur = as.vector(t(pcaef.cur))[obspts.vec]
sigma.q.beta = solve(as.numeric((Asig + I*D/2)/(b.q.sigma.me)) * XtX + kronecker(diag((Aw+Kt/2)/b.q.lambda.BW), P.mat ))
mu.q.beta = matrix(sigma.q.beta %*% (as.numeric((Asig + I*D/2)/(b.q.sigma.me)) * t.designmat.X %*% (Y.vec - mean.cur)), nrow = Kt, ncol = p)
beta.cur = t(mu.q.beta) %*% t(Theta)
fixef.cur = as.matrix(X %*% beta.cur)
XtX
Asig
I*D/2
as.numeric((Asig + I*D/2)/(b.q.sigma.me)) * XtX
kronecker(diag((Aw+Kt/2)/b.q.lambda.BW), P.mat )
as.numeric((Asig + I*D/2)/(b.q.sigma.me)) * XtX + kronecker(diag((Aw+Kt/2)/b.q.lambda.BW), P.mat )
(Aw+Kt/2)/b.q.lambda.BW
P.mat
kronecker(diag((Aw+Kt/2)/b.q.lambda.BW)
diag((Aw+Kt/2)/b.q.lambda.BW)
b.q.lambda.BW
b.q.lambda.BW
p
kronecker(diag((Aw+Kt/2)/b.q.lambda.BW, p, p), P.mat )
sigma.q.beta = solve(as.numeric((Asig + I*D/2)/(b.q.sigma.me)) * XtX + kronecker(diag((Aw+Kt/2)/b.q.lambda.BW, p, p), P.mat ))
source('~/Dropbox/Work/Current Projects/Software/BayesFoSR/R/VB_CS_FPCA.R')
fosr.dti1 = vb_cs_fpca(cca ~ 1, data = DTI, Kp = 2)
#' Sum computation 1
#'
#' Internal function used compute a sum in FPCA-based covariance updates
#'
#' @param mu.q.c
#' @param sig.q.c
#' @param theta
#' @param obspts.mat
#'
#' @author Jeff Goldsmith \email{ajg2202@@cumc.columbia.edu}
#'
f_sum = function(mu.q.c, sig.q.c, theta, obspts.mat){
I = dim(mu.q.c)[1]
kp = dim(mu.q.c)[2]
kt = dim(theta)[1]
ret.sum = matrix(0, kp*kt, kp*kt)
for(i in 1:I){
mu.mat = matrix(mu.q.c[i,], nrow = 1, ncol = kp)
ret.sum = ret.sum + kronecker(t(mu.mat) %*% mu.mat + sig.q.c[[i]], (theta[,obspts.mat[i,]])%*%t(theta[,obspts.mat[i,]]))
}
return(ret.sum)
}
fosr.dti1 = vb_cs_fpca(cca ~ 1, data = DTI, Kp = 2)
#' Sum computation 2
#'
#' Internal function used compute a sum in FPCA-based covariance updates
#'
#' @param y
#' @param fixef
#' @param mu.q.c
#' @param kt
#' @param theta
#'
#' @author Jeff Goldsmith \email{ajg2202@@cumc.columbia.edu}
#'
f_sum2 = function(y, fixef, mu.q.c, kt, theta){
I = dim(mu.q.c)[1]
kp = dim(mu.q.c)[2]
ret.sum = matrix(0, nrow = kp*kt, ncol = 1)
for(i in 1:I){
obs.pts = !is.na(y[i,])
ret.sum = ret.sum + kronecker((matrix(mu.q.c[i,])), theta[,obs.pts]) %*% matrix(y[i, obs.pts] - fixef[i,obs.pts])
}
return(ret.sum)
}
fosr.dti1 = vb_cs_fpca(cca ~ 1, data = DTI, Kp = 2)
#' Trace computation
#'
#' Internal function used compute a trace in FPCA-based covariance updates
#'
#' @param Theta_i
#' @param Sig_q_Bpsi
#' @param Kp
#' @param Kt
#'
#' @author Jeff Goldsmith \email{ajg2202@@cumc.columbia.edu}
f_trace = function(Theta_i, Sig_q_Bpsi, Kp, Kt){
ret.mat = matrix(NA, nrow = Kp, ncol = Kp)
A = Theta_i %*% t(Theta_i)
for(i in 1:Kp){
for(j in 1:Kp){
ret.mat[i,j] = sum(diag(A %*% Sig_q_Bpsi[((-1 + i)*Kt + 1):(i*Kt), ((-1 + j)*Kt + 1):(j*Kt)]))
}
}
return(ret.mat)
}
fosr.dti1 = vb_cs_fpca(cca ~ 1, data = DTI, Kp = 2)
#' Sum computation 2
#'
#' Internal function used compute a sum in FPCA-based covariance updates
#'
#' @param mu.q.c
#' @param sig.q.c
#' @param mu.q.bspi
#' @param sig.q.bpsi
#' @param theta
#' @param obspts.mat
#'
#' @author Jeff Goldsmith \email{ajg2202@@cumc.columbia.edu}
#'
f_sum4 = function(mu.q.c, sig.q.c, mu.q.bpsi, sig.q.bphi, theta, obspts.mat){
I = dim(mu.q.c)[1]
kp = dim(mu.q.c)[2]
kt = dim(theta)[2]
ret.sum = matrix(0, 1, 1)
for(i in 1:I){
theta_i = t(theta)[,obspts.mat[i,]]
temp =
f_trace(Theta_i = theta_i, Sig_q_Bpsi = sig.q.bphi, Kp = kp, Kt = kt) %*% matrix(mu.q.c[i,], kp, 1) %*% matrix(mu.q.c[i,], 1, kp) +
f_trace(Theta_i = theta_i, Sig_q_Bpsi = sig.q.bphi, Kp = kp, Kt = kt) %*% sig.q.c[[i]] +
t(mu.q.bpsi) %*% theta_i %*% t(theta_i) %*% mu.q.bpsi %*% sig.q.c[[i]]
ret.sum = ret.sum + sum(diag(temp))
}
return(ret.sum)
}
fosr.dti1 = vb_cs_fpca(cca ~ 1, data = DTI, Kp = 2)
